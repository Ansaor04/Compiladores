var keyword
a id
, delimitator
b id
, delimitator
c id
: delimitator
int keyword
; delimitator
var keyword
d id
: delimitator
int keyword
; delimitator
var keyword
e id
, delimitator
f id
: delimitator
float keyword
; delimitator
var keyword
g id
[ agrupation
10 int
] agrupation
, delimitator
h id
[ agrupation
1 int
] agrupation
: delimitator
int keyword
; delimitator
procedure keyword
uno id
( agrupation
) agrupation
{ agrupation
var keyword
a id
: delimitator
bool keyword
; delimitator
a id
= assignation
true keyword
; delimitator
e id
= assignation
100.0 float
; delimitator
} agrupation
procedure keyword
dos id
( agrupation
a id
: delimitator
float keyword
; delimitator
b id
: delimitator
bool keyword
) agrupation
{ agrupation
switch keyword
( agrupation
c id
) agrupation
{ agrupation
4 int
: delimitator
{ agrupation
f id
= assignation
a id
* arithmetic operator
- arithmetic operator
1.0 float
; delimitator
} agrupation
5 int
: delimitator
{ agrupation
f id
= assignation
a id
* arithmetic operator
10.0 float
; delimitator
} agrupation
9 int
: delimitator
{ agrupation
if keyword
( agrupation
b id
) agrupation
{ agrupation
f id
= assignation
a id
* arithmetic operator
100.0 float
; delimitator
} agrupation
} agrupation
default id
: delimitator
{ agrupation
f id
= assignation
1000.0 float
; delimitator
} agrupation
} agrupation
} agrupation
function keyword
func1 id
( agrupation
) agrupation
: delimitator
int keyword
{ agrupation
var keyword
total id
: delimitator
float keyword
; delimitator
total id
= assignation
e id
+ arithmetic operator
f id
; delimitator
return keyword
( agrupation
( agrupation
a id
* arithmetic operator
10 int
) agrupation
+ arithmetic operator
total id
) agrupation
; delimitator
} agrupation
function keyword
func2 id
( agrupation
) agrupation
: delimitator
float keyword
{ agrupation
var keyword
x id
: delimitator
int keyword
; delimitator
var keyword
y id
, delimitator
z id
: delimitator
float keyword
; delimitator
x id
= assignation
1 int
; delimitator
y id
= assignation
2.0 float
; delimitator
z id
= assignation
true keyword
; delimitator
x id
= assignation
x id
+ arithmetic operator
1 int
; delimitator
y id
= assignation
y id
* arithmetic operator
z id
; delimitator
z id
= assignation
x id
* arithmetic operator
y id
; delimitator
} agrupation
function keyword
func3 id
( agrupation
param1 id
: delimitator
float keyword
) agrupation
: delimitator
float keyword
{ agrupation
var keyword
g id
: delimitator
float keyword
; delimitator
if keyword
( agrupation
g id
> relational operator
0.0 float
) agrupation
{ agrupation
g id
= assignation
200.0 float
; delimitator
} agrupation
else keyword
{ agrupation
g id
= assignation
100.0 float
; delimitator
} agrupation
return keyword
3 int
; delimitator
} agrupation
main keyword
( agrupation
) agrupation
{ agrupation
a id
= assignation
false keyword
; delimitator
a id
= assignation
w id
; delimitator
g id
[ agrupation
0 int
] agrupation
= assignation
1 int
; delimitator
g id
[ agrupation
1 int
] agrupation
= assignation
2 int
; delimitator
g id
[ agrupation
3 int
] agrupation
= assignation
3 int
; delimitator
g id
[ agrupation
4 int
] agrupation
= assignation
4 int
; delimitator
g id
[ agrupation
5 int
] agrupation
= assignation
5 int
; delimitator
uno id
( agrupation
x id
) agrupation
; delimitator
dos id
( agrupation
) agrupation
; delimitator
dos id
( agrupation
x id
, delimitator
false keyword
) agrupation
; delimitator
tres id
( agrupation
) agrupation
; delimitator
g id
[ agrupation
6 int
] agrupation
= assignation
uno id
( agrupation
) agrupation
; delimitator
g id
[ agrupation
6 int
] agrupation
= assignation
func1 id
( agrupation
) agrupation
; delimitator
g id
[ agrupation
7 int
] agrupation
= assignation
func2 id
( agrupation
) agrupation
; delimitator
g id
[ agrupation
8 int
] agrupation
= assignation
func3 id
( agrupation
100.0 float
) agrupation
; delimitator
func4 id
( agrupation
) agrupation
; delimitator
if keyword
( agrupation
( agrupation
g id
[ agrupation
0 int
] agrupation
+ arithmetic operator
g id
[ agrupation
5 int
] agrupation
) agrupation
> relational operator
10 int
) agrupation
{ agrupation
g id
[ agrupation
0 int
] agrupation
= assignation
283764.4 float
; delimitator
} agrupation
if keyword
( agrupation
( agrupation
g id
[ agrupation
0 int
] agrupation
+ arithmetic operator
g id
[ agrupation
9 int
] agrupation
) agrupation
> relational operator
10 int
) agrupation
{ agrupation
g id
[ agrupation
0 int
] agrupation
= assignation
22222 int
; delimitator
} agrupation
} agrupation
