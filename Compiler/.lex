main keyword
( agrupation
) agrupation
{ agrupation
var keyword
x id
: delimitator
int keyword
; delimitator
a id
= assignation
false keyword
; delimitator
a id
= assignation
w id
; delimitator
g id
[ agrupation
0 int
] agrupation
= assignation
1 int
; delimitator
g id
[ agrupation
1 int
] agrupation
= assignation
2 int
; delimitator
g id
[ agrupation
3 int
] agrupation
= assignation
3 int
; delimitator
g id
[ agrupation
4 int
] agrupation
= assignation
4 int
; delimitator
g id
[ agrupation
5 int
] agrupation
= assignation
5 int
; delimitator
uno id
( agrupation
x id
) agrupation
; delimitator
dos id
( agrupation
) agrupation
; delimitator
dos id
( agrupation
x id
, delimitator
false keyword
) agrupation
; delimitator
tres id
( agrupation
) agrupation
; delimitator
g id
[ agrupation
6 int
] agrupation
= assignation
uno id
( agrupation
) agrupation
; delimitator
g id
[ agrupation
6 int
] agrupation
= assignation
func1 id
( agrupation
) agrupation
; delimitator
g id
[ agrupation
7 int
] agrupation
= assignation
func2 id
( agrupation
) agrupation
; delimitator
g id
[ agrupation
8 int
] agrupation
= assignation
func3 id
( agrupation
100.0 float
) agrupation
; delimitator
func4 id
( agrupation
) agrupation
; delimitator
if keyword
( agrupation
( agrupation
g id
[ agrupation
0 int
] agrupation
+ arithmetic operator
g id
[ agrupation
5 int
] agrupation
) agrupation
> relational operator
10 int
) agrupation
{ agrupation
g id
[ agrupation
0 int
] agrupation
= assignation
283764.4 float
; delimitator
} agrupation
if keyword
( agrupation
( agrupation
g id
[ agrupation
0 int
] agrupation
+ arithmetic operator
g id
[ agrupation
9 int
] agrupation
) agrupation
> relational operator
10 int
) agrupation
{ agrupation
g id
[ agrupation
0 int
] agrupation
= assignation
22222 int
; delimitator
} agrupation
return keyword
0 int
; delimitator
} agrupation
